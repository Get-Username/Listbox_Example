#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: a52c1ebf-8aec-499b-b00a-116162a1b000
# Source File: C:\Users\TFreedland\Documents\ListBox_Example\ListBoxExample.psf
#------------------------------------------------------------------------

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.127
     Generated on:       8/19/2016 4:54 PM
     Generated by:       Trevor
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2016
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-ListBoxExample_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$labelClickOGVToSendResult = New-Object 'System.Windows.Forms.Label'
	$buttonOGV = New-Object 'System.Windows.Forms.Button'
	$labelClickCLEARToClearLis = New-Object 'System.Windows.Forms.Label'
	$labelClickGOToPopulateLis = New-Object 'System.Windows.Forms.Label'
	$labelCheckProcessesListbo = New-Object 'System.Windows.Forms.Label'
	$buttonCLEAR = New-Object 'System.Windows.Forms.Button'
	$buttonGO = New-Object 'System.Windows.Forms.Button'
	$listboxOutput = New-Object 'System.Windows.Forms.ListBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	#region Control Helper Functions
	function Load-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
	    Param (
	        [ValidateNotNull()]
	        [Parameter(Mandatory = $true)]
	        [System.Windows.Forms.ListBox]$ListBox,
	        
	        [ValidateNotNull()]
	        [Parameter(Mandatory = $true)]
	        $Items,
	        
	        [Parameter(Mandatory = $false)]
	        [string]$DisplayMember,
	        
	        [switch]$Append
	    )
	    
	    if (-not $Append)
	    {
	        $listBox.Items.Clear()
	    }
	    
	    if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	    {
	        $listBox.Items.AddRange($Items)
	    }
	    elseif ($Items -is [System.Collections.IEnumerable])
	    {
	        $listBox.BeginUpdate()
	        foreach ($obj in $Items)
	        {
	            $listBox.Items.Add($obj)
	        }
	        $listBox.EndUpdate()
	    }
	    else
	    {
	        $listBox.Items.Add($Items)
	    }
	    
	    $listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$formMain_Load = { }
	
	$buttonGO_Click = {
	    $results = Get-Process
	    Load-ListBox $listboxOutput "The results of Get-Process is:"
	    Load-ListBox $listboxOutput $results.Name -Append
	}
	
	$buttonCLEAR_Click = { $listboxOutput.Items.Clear() }
	
	$buttonOGV_Click={
	    $results = Get-Process
	    $results.Name | Out-GridView	
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOGV.remove_Click($buttonOGV_Click)
			$buttonCLEAR.remove_Click($buttonCLEAR_Click)
			$buttonGO.remove_Click($buttonGO_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($labelClickOGVToSendResult)
	$formMain.Controls.Add($buttonOGV)
	$formMain.Controls.Add($labelClickCLEARToClearLis)
	$formMain.Controls.Add($labelClickGOToPopulateLis)
	$formMain.Controls.Add($labelCheckProcessesListbo)
	$formMain.Controls.Add($buttonCLEAR)
	$formMain.Controls.Add($buttonGO)
	$formMain.Controls.Add($listboxOutput)
	$formMain.AutoScaleDimensions = '6, 13'
	$formMain.AutoScaleMode = 'Font'
	$formMain.ClientSize = '536, 493'
	$formMain.Name = 'formMain'
	$formMain.Text = 'Get-Example'
	$formMain.add_Load($formMain_Load)
	#
	# labelClickOGVToSendResult
	#
	$labelClickOGVToSendResult.AutoSize = $True
	$labelClickOGVToSendResult.Location = '291, 329'
	$labelClickOGVToSendResult.Name = 'labelClickOGVToSendResult'
	$labelClickOGVToSendResult.Size = '165, 13'
	$labelClickOGVToSendResult.TabIndex = 7
	$labelClickOGVToSendResult.Text = 'Click OGV to send results to OGV'
	#
	# buttonOGV
	#
	$buttonOGV.Location = '291, 303'
	$buttonOGV.Name = 'buttonOGV'
	$buttonOGV.Size = '75, 23'
	$buttonOGV.TabIndex = 6
	$buttonOGV.Text = 'OGV'
	$buttonOGV.UseVisualStyleBackColor = $True
	$buttonOGV.add_Click($buttonOGV_Click)
	#
	# labelClickCLEARToClearLis
	#
	$labelClickCLEARToClearLis.AutoSize = $True
	$labelClickCLEARToClearLis.Location = '12, 408'
	$labelClickCLEARToClearLis.Name = 'labelClickCLEARToClearLis'
	$labelClickCLEARToClearLis.Size = '138, 13'
	$labelClickCLEARToClearLis.TabIndex = 5
	$labelClickCLEARToClearLis.Text = 'Click CLEAR to clear listbox'
	#
	# labelClickGOToPopulateLis
	#
	$labelClickGOToPopulateLis.AutoSize = $True
	$labelClickGOToPopulateLis.Location = '12, 329'
	$labelClickGOToPopulateLis.Name = 'labelClickGOToPopulateLis'
	$labelClickGOToPopulateLis.Size = '210, 13'
	$labelClickGOToPopulateLis.TabIndex = 4
	$labelClickGOToPopulateLis.Text = 'Click GO to populate listbox with processes'
	#
	# labelCheckProcessesListbo
	#
	$labelCheckProcessesListbo.AutoSize = $True
	$labelCheckProcessesListbo.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelCheckProcessesListbo.Location = '166, 28'
	$labelCheckProcessesListbo.Name = 'labelCheckProcessesListbo'
	$labelCheckProcessesListbo.Size = '199, 13'
	$labelCheckProcessesListbo.TabIndex = 3
	$labelCheckProcessesListbo.Text = 'Check Processes Listbox example'
	#
	# buttonCLEAR
	#
	$buttonCLEAR.Location = '12, 382'
	$buttonCLEAR.Name = 'buttonCLEAR'
	$buttonCLEAR.Size = '75, 23'
	$buttonCLEAR.TabIndex = 2
	$buttonCLEAR.Text = 'CLEAR'
	$buttonCLEAR.UseVisualStyleBackColor = $True
	$buttonCLEAR.add_Click($buttonCLEAR_Click)
	#
	# buttonGO
	#
	$buttonGO.Location = '12, 303'
	$buttonGO.Name = 'buttonGO'
	$buttonGO.Size = '75, 23'
	$buttonGO.TabIndex = 1
	$buttonGO.Text = 'GO'
	$buttonGO.UseVisualStyleBackColor = $True
	$buttonGO.add_Click($buttonGO_Click)
	#
	# listboxOutput
	#
	$listboxOutput.FormattingEnabled = $True
	$listboxOutput.Location = '12, 72'
	$listboxOutput.Name = 'listboxOutput'
	$listboxOutput.Size = '503, 160'
	$listboxOutput.TabIndex = 0
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formMain.ShowDialog()

} #End Function

#Call the form
Call-ListBoxExample_psf | Out-Null
